/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "./datepicker.module";
import * as i2 from "../popup/components/popup.ngfactory";
import * as i3 from "./components/datepicker.ngfactory";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "../../misc/util/services/component-factory.service";
import * as i7 from "../popup/services/popup.service";
import * as i8 from "../../behaviors/localization/services/localization.service";
import * as i9 from "../transition/transition.module";
import * as i10 from "../../misc/util/util.module";
import * as i11 from "../popup/popup.module";
import * as i12 from "../../behaviors/localization/localization.module";
var SuiDatepickerModuleNgFactory = i0.ɵcmf(i1.SuiDatepickerModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.SuiPopupNgFactory, i3.SuiDatepickerNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i4.NgLocalization, i4.NgLocaleLocalization, [i0.LOCALE_ID]), i0.ɵmpd(4608, i5.ɵangular_packages_forms_forms_n, i5.ɵangular_packages_forms_forms_n, []), i0.ɵmpd(4608, i6.SuiComponentFactory, i6.SuiComponentFactory, [i0.ApplicationRef, i0.ComponentFactoryResolver, i0.Injector]), i0.ɵmpd(4608, i7.SuiPopupConfig, i7.SuiPopupConfig, []), i0.ɵmpd(4608, i8.SuiLocalizationService, i8.SuiLocalizationService, []), i0.ɵmpd(1073742336, i4.CommonModule, i4.CommonModule, []), i0.ɵmpd(1073742336, i5.ɵangular_packages_forms_forms_d, i5.ɵangular_packages_forms_forms_d, []), i0.ɵmpd(1073742336, i5.FormsModule, i5.FormsModule, []), i0.ɵmpd(1073742336, i9.SuiTransitionModule, i9.SuiTransitionModule, []), i0.ɵmpd(1073742336, i10.SuiUtilityModule, i10.SuiUtilityModule, []), i0.ɵmpd(1073742336, i11.SuiPopupModule, i11.SuiPopupModule, []), i0.ɵmpd(1073742336, i12.SuiLocalizationModule, i12.SuiLocalizationModule, []), i0.ɵmpd(1073742336, i1.SuiDatepickerModule, i1.SuiDatepickerModule, [])]); });
export { SuiDatepickerModuleNgFactory as SuiDatepickerModuleNgFactory };
//# sourceMappingURL=data:application/json;base64,
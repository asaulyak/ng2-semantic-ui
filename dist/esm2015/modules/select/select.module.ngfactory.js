/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "./select.module";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "../../misc/util/services/component-factory.service";
import * as i5 from "../../behaviors/localization/services/localization.service";
import * as i6 from "../transition/transition.module";
import * as i7 from "../dropdown/dropdown.module";
import * as i8 from "../../misc/util/util.module";
import * as i9 from "../../behaviors/localization/localization.module";
var SuiSelectModuleNgFactory = i0.ɵcmf(i1.SuiSelectModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID]), i0.ɵmpd(4608, i3.ɵangular_packages_forms_forms_n, i3.ɵangular_packages_forms_forms_n, []), i0.ɵmpd(4608, i4.SuiComponentFactory, i4.SuiComponentFactory, [i0.ApplicationRef, i0.ComponentFactoryResolver, i0.Injector]), i0.ɵmpd(4608, i5.SuiLocalizationService, i5.SuiLocalizationService, []), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i3.ɵangular_packages_forms_forms_d, i3.ɵangular_packages_forms_forms_d, []), i0.ɵmpd(1073742336, i3.FormsModule, i3.FormsModule, []), i0.ɵmpd(1073742336, i6.SuiTransitionModule, i6.SuiTransitionModule, []), i0.ɵmpd(1073742336, i7.SuiDropdownModule, i7.SuiDropdownModule, []), i0.ɵmpd(1073742336, i8.SuiUtilityModule, i8.SuiUtilityModule, []), i0.ɵmpd(1073742336, i9.SuiLocalizationModule, i9.SuiLocalizationModule, []), i0.ɵmpd(1073742336, i1.SuiSelectModule, i1.SuiSelectModule, [])]); });
export { SuiSelectModuleNgFactory as SuiSelectModuleNgFactory };
//# sourceMappingURL=data:application/json;base64,
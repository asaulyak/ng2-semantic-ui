import { AfterViewInit, EventEmitter, ElementRef, TemplateRef, Renderer2, OnDestroy } from "@angular/core";
import { ITemplateRefContext, IFocusEvent } from "../../../misc/util/index";
import { DropdownService } from "../../dropdown/index";
import { ISearchLocaleValues, RecursivePartial, SuiLocalizationService } from "../../../behaviors/localization/index";
import { SearchService } from "../services/search.service";
import { LookupFn, FilterFn } from "../helpers/lookup-fn";
export interface IResultContext<T> extends ITemplateRefContext<T> {
    query: string;
}
export declare class SuiSearch<T> implements AfterViewInit, OnDestroy {
    private _element;
    private _localizationService;
    dropdownService: DropdownService;
    searchService: SearchService<T, T>;
    private _menu;
    readonly hasClasses: boolean;
    get isActive(): boolean;
    hasIcon: boolean;
    private _placeholder;
    get placeholder(): string;
    set placeholder(placeholder: string);
    private _localeValues;
    localeOverrides: RecursivePartial<ISearchLocaleValues>;
    get localeValues(): ISearchLocaleValues;
    get query(): string;
    set query(query: string);
    set options(options: T[] | undefined);
    set optionsFilter(filter: FilterFn<T> | undefined);
    set optionsLookup(lookupFn: LookupFn<T> | undefined);
    set optionsField(field: string | undefined);
    private _resultFormatter?;
    get resultFormatter(): (result: T, query: string) => string;
    set resultFormatter(formatter: (result: T, query: string) => string);
    resultTemplate: TemplateRef<IResultContext<T>>;
    retainSelectedResult: boolean;
    set searchDelay(delay: number);
    get isSearching(): boolean;
    maxResults: number;
    get results(): T[];
    selectedResult?: T;
    onResultSelected: EventEmitter<T>;
    transition: string;
    transitionDuration: number;
    private _documentClickListener;
    constructor(_element: ElementRef, renderer: Renderer2, _localizationService: SuiLocalizationService);
    ngAfterViewInit(): void;
    private onLocaleUpdate;
    select(result: T): void;
    onClick(e: MouseEvent): void;
    onFocusIn(): void;
    private open;
    onFocusOut(e: IFocusEvent): void;
    onDocumentClick(e: MouseEvent): void;
    readValue(object: T): string;
    ngOnDestroy(): void;
}

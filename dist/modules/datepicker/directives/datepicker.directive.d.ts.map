{"version":3,"file":"datepicker.directive.d.ts","sources":["/home/jenya/Projects/ng2-semantic-ui/dist/modules/datepicker/directives/datepicker.directive.d.ts"],"sourcesContent":["import { ElementRef, Renderer2, EventEmitter, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { AbstractControl, ValidationErrors } from \"@angular/forms\";\nimport { ICustomValueAccessorHost, CustomValueAccessor, ICustomValidatorHost, CustomValidator, PositioningPlacement, SuiComponentFactory } from \"../../../misc/util/index\";\nimport { IDatepickerLocaleValues, RecursivePartial, SuiLocalizationService } from \"../../../behaviors/localization/index\";\nimport { SuiPopupComponentController, PopupAfterOpen } from \"../../popup/index\";\nimport { SuiDatepicker, DatepickerMode } from \"../components/datepicker\";\nimport { CalendarConfig } from \"../classes/calendar-config\";\nexport declare class SuiDatepickerDirective extends SuiPopupComponentController<SuiDatepicker> implements ICustomValueAccessorHost<Date>, ICustomValidatorHost, OnChanges, PopupAfterOpen {\n    renderer: Renderer2;\n    localizationService: SuiLocalizationService;\n    private _selectedDate?;\n    get selectedDate(): Date | undefined;\n    set selectedDate(date: Date | undefined);\n    private _mode;\n    config: CalendarConfig;\n    get mode(): DatepickerMode;\n    set mode(mode: DatepickerMode);\n    initialDate?: Date;\n    maxDate?: Date;\n    minDate?: Date;\n    firstDayOfWeek?: number;\n    private _localeValues;\n    localeOverrides: RecursivePartial<IDatepickerLocaleValues>;\n    get localeValues(): IDatepickerLocaleValues;\n    set placement(placement: PositioningPlacement);\n    set transition(transition: string);\n    set transitionDuration(duration: number);\n    onSelectedDateChange: EventEmitter<Date>;\n    onValidatorChange: EventEmitter<void>;\n    constructor(renderer: Renderer2, element: ElementRef, componentFactory: SuiComponentFactory, localizationService: SuiLocalizationService);\n    popupOnOpen(): void;\n    ngOnChanges({ maxDate, minDate, mode }: SimpleChanges): void;\n    private onLocaleUpdate;\n    validate(c: AbstractControl): ValidationErrors | null;\n    writeValue(value: Date | undefined): void;\n    onKeyDown(e: KeyboardEvent): void;\n}\nexport declare class SuiDatepickerDirectiveValueAccessor extends CustomValueAccessor<Date, SuiDatepickerDirective> {\n    host: SuiDatepickerDirective;\n    constructor(host: SuiDatepickerDirective);\n}\nexport declare class SuiDatepickerDirectiveValidator extends CustomValidator<SuiDatepickerDirective> {\n    host: SuiDatepickerDirective;\n    constructor(host: SuiDatepickerDirective);\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;AAIA;;;;;;AAIA;"}
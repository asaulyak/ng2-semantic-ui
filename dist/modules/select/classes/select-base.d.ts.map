{"version":3,"file":"select-base.d.ts","sources":["/home/jenya/Projects/ng2-semantic-ui/dist/modules/select/classes/select-base.d.ts"],"sourcesContent":["import { ElementRef, QueryList, AfterContentInit, TemplateRef, ViewContainerRef, EventEmitter, OnDestroy, Renderer2 } from \"@angular/core\";\nimport { DropdownService, SuiDropdownMenu } from \"../../dropdown/index\";\nimport { SearchService, LookupFn, FilterFn } from \"../../search/index\";\nimport { ITemplateRefContext, HandledEvent, IFocusEvent } from \"../../../misc/util/index\";\nimport { ISelectLocaleValues, RecursivePartial, SuiLocalizationService } from \"../../../behaviors/localization/index\";\nimport { SuiSelectOption } from \"../components/select-option\";\nimport { SuiSelectSearch } from \"../directives/select-search\";\nexport interface IOptionContext<T> extends ITemplateRefContext<T> {\n    query?: string;\n}\nexport declare abstract class SuiSelectBase<T, U> implements AfterContentInit, OnDestroy {\n    private _element;\n    protected _localizationService: SuiLocalizationService;\n    dropdownService: DropdownService;\n    searchService: SearchService<T, U>;\n    protected _menu: SuiDropdownMenu;\n    protected _renderedOptions: QueryList<SuiSelectOption<T>>;\n    private _renderedSubscriptions;\n    readonly hasClasses: boolean;\n    get isActive(): boolean;\n    get isVisible(): boolean;\n    isSearchable: boolean;\n    isSearchExternal: boolean;\n    get hasSearchClass(): boolean;\n    get isSearching(): boolean;\n    private _internalSearch?;\n    private _manualSearch?;\n    get searchInput(): SuiSelectSearch | undefined;\n    private _tabIndex?;\n    get tabindex(): number;\n    get isDisabled(): boolean;\n    set isDisabled(value: boolean);\n    set options(options: T[]);\n    set optionsFilter(filter: FilterFn<T> | undefined);\n    set optionsLookup(lookup: LookupFn<T, U> | undefined);\n    get filteredOptions(): T[];\n    get availableOptions(): T[];\n    get query(): string | undefined;\n    set query(query: string | undefined);\n    get labelField(): string | undefined;\n    set labelField(field: string | undefined);\n    get labelGetter(): (obj: T) => string;\n    valueField: string;\n    get valueGetter(): (obj: T) => U;\n    optionTemplate: TemplateRef<IOptionContext<T>>;\n    private _optionFormatter?;\n    get configuredFormatter(): (option: T) => string;\n    set optionFormatter(formatter: ((option: T, query?: string) => string) | undefined);\n    private _localeValues;\n    localeOverrides: RecursivePartial<ISelectLocaleValues>;\n    get localeValues(): ISelectLocaleValues;\n    icon: string;\n    transition: string;\n    transitionDuration: number;\n    onTouched: EventEmitter<void>;\n    private _documentKeyDownListener;\n    constructor(_element: ElementRef, renderer: Renderer2, _localizationService: SuiLocalizationService);\n    ngAfterContentInit(): void;\n    private onLocaleUpdate;\n    protected optionsUpdateHook(): void;\n    protected queryUpdateHook(): void;\n    protected updateQuery(query: string): void;\n    protected resetQuery(delayed?: boolean): void;\n    protected onAvailableOptionsRendered(): void;\n    protected initialiseRenderedOption(option: SuiSelectOption<T>): void;\n    abstract selectOption(option: T): void;\n    protected findOption(options: T[], value: U): T | undefined;\n    onCaretClick(e: HandledEvent): void;\n    onClick(e: HandledEvent): void;\n    onFocusIn(): void;\n    onFocusOut(e: IFocusEvent): void;\n    onKeyPress(e: KeyboardEvent): void;\n    onDocumentKeyDown(e: KeyboardEvent): void;\n    onQueryInputKeydown(event: KeyboardEvent): void;\n    protected focus(): void;\n    protected drawTemplate(siblingRef: ViewContainerRef, value: T): void;\n    ngOnDestroy(): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;"}
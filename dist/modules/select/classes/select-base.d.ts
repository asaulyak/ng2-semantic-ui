import { ElementRef, QueryList, AfterContentInit, TemplateRef, ViewContainerRef, EventEmitter, OnDestroy } from "@angular/core";
import { DropdownService, SuiDropdownMenu } from "../../dropdown/internal";
import { SearchService, LookupFn, FilterFn } from "../../search/internal";
import { ITemplateRefContext, HandledEvent, IFocusEvent } from "../../../misc/util/internal";
import { ISelectLocaleValues, RecursivePartial, SuiLocalizationService } from "../../../behaviors/localization/internal";
import { SuiSelectOption } from "../components/select-option";
import { SuiSelectSearch } from "../directives/select-search";
import * as i0 from "@angular/core";
export interface IOptionContext<T> extends ITemplateRefContext<T> {
    query?: string;
}
export declare abstract class SuiSelectBase<T, U> implements AfterContentInit, OnDestroy {
    private _element;
    protected _localizationService: SuiLocalizationService;
    dropdownService: DropdownService;
    searchService: SearchService<T, U>;
    protected _menu: SuiDropdownMenu;
    protected _renderedOptions: QueryList<SuiSelectOption<T>>;
    private _renderedSubscriptions;
    readonly hasClasses: boolean;
    get isActive(): boolean;
    get isVisible(): boolean;
    isSearchable: boolean;
    isSearchExternal: boolean;
    get hasSearchClass(): boolean;
    get isSearching(): boolean;
    private _internalSearch?;
    private _manualSearch?;
    get searchInput(): SuiSelectSearch | undefined;
    private _tabIndex?;
    get tabindex(): number;
    get isDisabled(): boolean;
    set isDisabled(value: boolean);
    set options(options: T[]);
    set optionsFilter(filter: FilterFn<T> | undefined);
    set optionsLookup(lookup: LookupFn<T, U> | undefined);
    get filteredOptions(): T[];
    get availableOptions(): T[];
    get query(): string | undefined;
    set query(query: string | undefined);
    get labelField(): string | undefined;
    set labelField(field: string | undefined);
    get labelGetter(): (obj: T) => string;
    valueField: string;
    get valueGetter(): (obj: T) => U;
    optionTemplate: TemplateRef<IOptionContext<T>>;
    private _optionFormatter?;
    get configuredFormatter(): (option: T) => string;
    set optionFormatter(formatter: ((option: T, query?: string) => string) | undefined);
    private _localeValues;
    localeOverrides: RecursivePartial<ISelectLocaleValues>;
    get localeValues(): ISelectLocaleValues;
    icon: string;
    transition: string;
    transitionDuration: number;
    onTouched: EventEmitter<void>;
    constructor(_element: ElementRef, _localizationService: SuiLocalizationService);
    ngAfterContentInit(): void;
    private onLocaleUpdate;
    protected optionsUpdateHook(): void;
    protected queryUpdateHook(): void;
    protected updateQuery(query: string): void;
    protected resetQuery(delayed?: boolean): void;
    protected onAvailableOptionsRendered(): void;
    protected initialiseRenderedOption(option: SuiSelectOption<T>): void;
    abstract selectOption(option: T): void;
    protected findOption(options: T[], value: U): T | undefined;
    onCaretClick(e: HandledEvent): void;
    onClick(e: HandledEvent): void;
    onFocusIn(): void;
    onFocusOut(e: IFocusEvent): void;
    onKeyPress(e: KeyboardEvent): void;
    onKeyDown(e: KeyboardEvent): void;
    onQueryInputKeydown(event: KeyboardEvent): void;
    protected focus(): void;
    protected drawTemplate(siblingRef: ViewContainerRef, value: T): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDef<SuiSelectBase<any, any>>;
    static ɵdir: i0.ɵɵDirectiveDefWithMeta<SuiSelectBase<any, any>, never, never, { "isSearchable": "isSearchable"; "_tabIndex": "tabindex"; "isDisabled": "isDisabled"; "options": "options"; "optionsFilter": "optionsFilter"; "optionsLookup": "optionsLookup"; "labelField": "labelField"; "valueField": "valueField"; "optionTemplate": "optionTemplate"; "optionFormatter": "optionFormatter"; "icon": "icon"; "transition": "transition"; "transitionDuration": "transitionDuration"; }, { "onTouched": "touched"; }, ["_manualSearch", "_renderedOptions"]>;
}

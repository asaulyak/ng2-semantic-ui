import { OnInit, ElementRef, Renderer2, EventEmitter, ViewContainerRef, AfterViewInit } from "@angular/core";
import { IDynamicClasses, SuiComponentFactory } from "../../../misc/util/internal";
import { TransitionController } from "../../transition/internal";
import { ModalControls, ModalResult } from "../classes/modal-controls";
import { ModalConfig, ModalSize } from "../classes/modal-config";
import * as i0 from "@angular/core";
export declare class SuiModal<T, U> implements OnInit, AfterViewInit {
    private _renderer;
    private _element;
    private _componentFactory;
    isClosable: boolean;
    closeResult: U;
    controls: ModalControls<T, U>;
    get approve(): ModalResult<T>;
    get deny(): ModalResult<U>;
    onApprove: EventEmitter<T>;
    onDeny: EventEmitter<U>;
    onDismiss: EventEmitter<void>;
    private _modalElement;
    size: ModalSize;
    isCentered: boolean;
    private _isFullScreen;
    get isFullScreen(): boolean;
    set isFullScreen(fullScreen: boolean);
    isBasic: boolean;
    private _mustScroll;
    private _mustAlwaysScroll;
    get mustScroll(): boolean;
    set mustScroll(mustScroll: boolean);
    private _isInverted;
    get isInverted(): boolean;
    set isInverted(inverted: boolean);
    transitionController: TransitionController;
    transition: string;
    transitionDuration: number;
    dimBackground: boolean;
    private _isClosing;
    templateSibling: ViewContainerRef;
    private _originalContainer?;
    get dynamicClasses(): IDynamicClasses;
    constructor(_renderer: Renderer2, _element: ElementRef, _componentFactory: SuiComponentFactory);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    loadConfig<V>(config: ModalConfig<V, T, U>): void;
    private dismiss;
    close(): void;
    private updateScroll;
    onClick(e: MouseEvent): void;
    onDocumentKeyUp(e: KeyboardEvent): void;
    onDocumentResize(): void;
    static ɵfac: i0.ɵɵFactoryDef<SuiModal<any, any>>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<SuiModal<any, any>, "sui-modal", never, { "isClosable": "isClosable"; "closeResult": "closeResult"; "size": "size"; "isCentered": "isCentered"; "isFullScreen": "isFullScreen"; "isBasic": "isBasic"; "mustScroll": "mustScroll"; "isInverted": "isInverted"; "transition": "transition"; "transitionDuration": "transitionDuration"; }, { "onApprove": "approved"; "onDeny": "denied"; "onDismiss": "dismissed"; }, never>;
}
